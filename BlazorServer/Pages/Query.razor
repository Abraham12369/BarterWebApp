@page "/query"
@using DataLibrary
@using BlazorServer.Models
@using BlazorServer.Data
@using Microsoft.Extensions.Configuration
@inject IDatabaseAccess data
@inject IConfiguration config
@inject IServices service
<h3>Query</h3>
<EditForm Model="@newInput" OnValidSubmit="Search">
    <MatAutocompleteList Items="@t0" ShowClearButton="true" TItem="string" Label="Base Resource" @bind-Value="newInput.baseResource"/>
    <MatAutocompleteList Items="@t1" ShowClearButton="true" TItem="string" Label="T1 Resource" @bind-Value="newInput.t1Resource"/>
    <MatAutocompleteList Items="@t2" ShowClearButton="true" TItem="string" Label="T2 Resource" @bind-Value="newInput.t2Resource"/>
    <MatAutocompleteList Items="@loc1" ShowClearButton="true" TItem="string" Label="Location 1" @bind-Value="newInput.location1"/>
    <MatAutocompleteList Items="@loc2" ShowClearButton="true" TItem="string" Label="Location 2" @bind-Value="newInput.location2"/>
    @*<InputText @bind-Value="newInput.baseResource" />
    <InputText @bind-Value="newInput.t1Resource" />
    <InputText @bind-Value="newInput.t2Resource" />
    <InputText @bind-Value="newInput.location1" />
    <InputText @bind-Value="newInput.location2" />*@
    <button type="submit">Search</button>
</EditForm>

<table>
    @foreach (var route in distancePair)
    {
        <tr>
            <th>
            @route.Item1.Chain
            </th>
            <th>
                @route.Item2.ToString();
            </th>
        </tr>
    }
</table>


<h3>Inputs</h3>

<p>Base Resource</p>
<p>
    @newInput.baseResource
</p>
<p>T1 Resource</p>
<p>
    @newInput.t1Resource
</p>
<p>T2 Resource</p>
<p>
    @newInput.t2Resource
</p>
<p>T1 Location</p>
<p>
    @newInput.location1
</p>
<p>T2 Location</p>
<p>
    @newInput.location2
</p>
<p>Command</p>
<p>
    @sqlCommand
</p>




@code {
    private List<QueryInputModel> initialInputs = new List<QueryInputModel>();
    public QueryInputModel newInput = new QueryInputModel();
    List<TradeRoute> queriedRoutes = new List<TradeRoute>();
    List<Tuple<TradeRoute, float>> distancePair=new List<Tuple<TradeRoute, float>>();
    public string sqlCommand;
    string[] t0;
    string[] t1;
    string[] t2;
    string[] loc1;
    string[] loc2;




    protected override async Task OnInitializedAsync()
    {
        t0 = await data.GetUniqueValues("item0", config.GetConnectionString("default"));
        t1 = await data.GetUniqueValues("item1", config.GetConnectionString("default"));
        t2 = await data.GetUniqueValues("item2", config.GetConnectionString("default"));
        loc1 = await data.GetUniqueValues("location0", config.GetConnectionString("default"));
        loc2 = await data.GetUniqueValues("location1", config.GetConnectionString("default"));
    }

    private async void Search()
    {
        Console.WriteLine("searching");
        string sql = "SELECT chainID from itemroutes where Location0 LIKE '%" + newInput.location1 + "%' AND Location1 LIKE '%" + newInput.location2 +
            "%' AND Item0 LIKE '%" + newInput.baseResource + "%' AND Item1 LIKE '%" + newInput.t1Resource + "%' AND Item2 LIKE '%" + newInput.t2Resource + "%'";
        sqlCommand = await data.GetChainID(sql, config.GetConnectionString("default"));
        queriedRoutes=await data.LoadChain(sqlCommand,config.GetConnectionString("default"));
        Console.WriteLine(queriedRoutes.Count);
        foreach(TradeRoute subroute in queriedRoutes)
        {
            var adder=await service.GetTotalDistance(subroute, config.GetConnectionString("locations"));
            distancePair.Add(adder);
        }
        //queriedRoutes = await data.LoadData<TradeRoute, dynamic>(sql, new { }, config.GetConnectionString("default"));
    }

}
